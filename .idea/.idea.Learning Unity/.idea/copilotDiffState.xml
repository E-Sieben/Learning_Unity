<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Player/PlayerController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Player/PlayerController.cs" />
              <option name="originalContent" value="using System;&#10;using UnityEngine;&#10;using UnityEngine.InputSystem;&#10;&#10;namespace Player&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Manages a Player&#10;    /// &lt;/summary&gt;&#10;    public class PlayerController : MonoBehaviour&#10;    {&#10;        // Movement&#10;        /// &lt;summary&gt;Defines the Movement Speed of the Player as a Floating Point Number&lt;/summary&gt;&#10;        [field: SerializeField]&#10;        private float movementSpeed { get; set; } = 0.2f;&#10;&#10;        /// &lt;summary&gt;Defines the Rotation Speed of the Player as a Floating Point Number&lt;/summary&gt;&#10;        [field: SerializeField]&#10;        private float rotationSpeed { get; set; } = 0.2f;&#10;&#10;        /// &lt;summary&gt;Defines the Strength of the Players Magnet&lt;/summary&gt;&#10;        [SerializeField] private float magnetStrength = 0.5f;&#10;        &#10;        /// &lt;summary&gt;Defines the Pickup Range of the Players Magnet&lt;/summary&gt;&#10;        [SerializeField] private float pickupRange = 2f;&#10;&#10;        // Animation&#10;        /// &lt;summary&gt;Defines the Service to Control Animations&lt;/summary&gt;&#10;        private AnimationService _animationService;&#10;&#10;        /// &lt;summary&gt;Defines the Service to Control the Player itself&lt;/summary&gt;&#10;        private MovementService _movementService;&#10;        // Public Access to Variables&#10;        /// &lt;summary&gt;Public accessor for the &lt;c&gt;magnetStrength&lt;/c&gt;&lt;/summary&gt;&#10;        public float magnetStrengthPub =&gt; magnetStrength;&#10;        &#10;        /// &lt;summary&gt;Public accessor for the &lt;c&gt;pickupRange&lt;/c&gt;&lt;/summary&gt;&#10;        public float pickupRangePub =&gt; pickupRange;&#10;&#10;        /// &lt;summary&gt;&#10;        ///     Inits the user inputs and the Player Service&#10;        /// &lt;/summary&gt;&#10;        private void Awake()&#10;        {&#10;            // Movement&#10;            _movementService =&#10;                new MovementService(InputSystem.actions.FindAction(&quot;move&quot;), transform, 0.5f);&#10;            // Animation&#10;            _animationService = new AnimationService(GetComponentInChildren&lt;Animator&gt;());&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        ///     Updates the Player on a Fixed Event in sync with the Engine&#10;        /// &lt;/summary&gt;&#10;        private void FixedUpdate()&#10;        {&#10;            if (_movementService.Move(movementSpeed, rotationSpeed))&#10;                _animationService.Walk();&#10;            else&#10;                _animationService.Idle();&#10;        }&#10;&#10;    }&#10;}" />
              <option name="updatedContent" value="using System;&#10;using UnityEngine;&#10;using UnityEngine.InputSystem;&#10;&#10;namespace Player&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Manages a Player&#10;    /// &lt;/summary&gt;&#10;    public class PlayerController : MonoBehaviour&#10;    {&#10;        // Movement&#10;        /// &lt;summary&gt;Defines the Movement Speed of the Player as a Floating Point Number&lt;/summary&gt;&#10;        [field: SerializeField]&#10;        private float movementSpeed { get; set; } = 0.2f;&#10;&#10;        /// &lt;summary&gt;Defines the Rotation Speed of the Player as a Floating Point Number&lt;/summary&gt;&#10;        [field: SerializeField]&#10;        private float rotationSpeed { get; set; } = 0.2f;&#10;&#10;        /// &lt;summary&gt;Defines the Strength of the Players Magnet&lt;/summary&gt;&#10;        [SerializeField] private float magnetStrength = 0.5f;&#10;        &#10;        /// &lt;summary&gt;Defines the Pickup Range of the Players Magnet&lt;/summary&gt;&#10;        [SerializeField] private float pickupRange = 2f;&#10;&#10;        // Animation&#10;        /// &lt;summary&gt;Defines the Service to Control Animations&lt;/summary&gt;&#10;        private AnimationService _animationService;&#10;&#10;        /// &lt;summary&gt;Defines the Service to Control the Player itself&lt;/summary&gt;&#10;        private MovementService _movementService;&#10;        // Public Access to Variables&#10;        /// &lt;summary&gt;Public accessor for the &lt;c&gt;magnetStrength&lt;/c&gt;&lt;/summary&gt;&#10;        public float magnetStrengthPub =&gt; magnetStrength;&#10;        &#10;        /// &lt;summary&gt;Public accessor for the &lt;c&gt;pickupRange&lt;/c&gt;&lt;/summary&gt;&#10;        public float pickupRangePub =&gt; pickupRange;&#10;&#10;        /// &lt;summary&gt;&#10;        ///     Inits the user inputs and the Player Service&#10;        /// &lt;/summary&gt;&#10;        private void Awake()&#10;        {&#10;            // Movement&#10;            _movementService =&#10;                new MovementService(InputSystem.actions.FindAction(&quot;move&quot;), transform, 0.5f);&#10;            // Animation&#10;            _animationService = new AnimationService(GetComponentInChildren&lt;Animator&gt;());&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        ///     Updates the Player on a Fixed Event in sync with the Engine&#10;        /// &lt;/summary&gt;&#10;        private void FixedUpdate()&#10;        {&#10;            if (_movementService.Move(movementSpeed, rotationSpeed))&#10;                _animationService.Walk();&#10;            else&#10;                _animationService.Idle();&#10;        }&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>